/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sth_s2;

import java.awt.Graphics2D;
import java.awt.geom.AffineTransform;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.JPanel;
import javax.swing.JTextArea;

/**
 *
 * @author Nezz
 */
public class ComposantInterface extends javax.swing.JFrame {

    /**
     * Creates new form ComposantInterface
     */
    private Circuit cir;
    private JTextArea logTextArea;
    private JPanel mainPanel;
    private BufferedImage image;
    private Graphics2D g;
    private List<Line2D> lineContainer = new ArrayList();
    private List<Ellipse2D> circContainer = new ArrayList();
    private List<MyImage> imgContainer = new ArrayList();

    public ComposantInterface() {
        initComponents();
    }

    public ComposantInterface(String type, String unite, Circuit cir, JTextArea logTextArea, JPanel mainPanel,List<Line2D> lineContainer,List<Ellipse2D> circContainer,List<MyImage> imgContainer) {
        initComponents();
        caractéristiqueLabel.setText(type);
        untieLabel.setText(unite);
        this.cir = cir;
        //pont  passage par référence losrque on fait des changement sur ce log text
        //Celui du applicationInterface change
        this.logTextArea = logTextArea;
        //de meme
        this.mainPanel = mainPanel;
        this.lineContainer=lineContainer;
        this.circContainer=circContainer;
        this.imgContainer=imgContainer;
     

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nomLabel = new javax.swing.JLabel();
        caractéristiqueLabel = new javax.swing.JLabel();
        nomTextField = new javax.swing.JTextField();
        carctéristiqueTextField = new javax.swing.JTextField();
        untieLabel = new javax.swing.JLabel();
        noueudArriveLabel = new javax.swing.JLabel();
        noeudArriveeTextField = new javax.swing.JTextField();
        noeudDepartLabel = new javax.swing.JLabel();
        noeudDepartTextField = new javax.swing.JTextField();
        TitreLabel = new javax.swing.JLabel();
        creeButton = new javax.swing.JButton();
        errorLabel = new javax.swing.JLabel();

        setTitle("Nouveau Composant");
        setName("ComposatInterface"); // NOI18N
        setPreferredSize(new java.awt.Dimension(420, 320));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        nomLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nomLabel.setText("Nom              :");
        getContentPane().add(nomLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 110, 40));

        caractéristiqueLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        caractéristiqueLabel.setText("Résistance      :");
        getContentPane().add(caractéristiqueLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 120, 50));
        getContentPane().add(nomTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 70, 100, 30));
        getContentPane().add(carctéristiqueTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 110, 100, 30));

        untieLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        untieLabel.setText("Ohm");
        getContentPane().add(untieLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 110, 60, 30));

        noueudArriveLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        noueudArriveLabel.setText("Noeud Arrivee :");
        getContentPane().add(noueudArriveLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 190, 100, 30));
        getContentPane().add(noeudArriveeTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 190, 100, 30));

        noeudDepartLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        noeudDepartLabel.setText("Noeud Depart :");
        getContentPane().add(noeudDepartLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, 100, 30));
        getContentPane().add(noeudDepartTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 150, 100, 30));

        TitreLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        TitreLabel.setText("Création d'un nouveau composant");
        getContentPane().add(TitreLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 20, 240, 40));

        creeButton.setText("Créer");
        creeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                creeButtonActionPerformed(evt);
            }
        });
        getContentPane().add(creeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 240, 100, 30));

        errorLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        getContentPane().add(errorLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 260, 110, 30));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void creeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_creeButtonActionPerformed
        // TODO add your handling code here:
        boolean cond = false;
        double val = 0;
        int naId = 0, ndId = 0, id = 0;
        try {
            val = Double.parseDouble(carctéristiqueTextField.getText());
            naId = Integer.parseInt(noeudArriveeTextField.getText());
            ndId = Integer.parseInt(noeudDepartTextField.getText());
            id = cir.getCompoCircuit().size() + 1;
        } catch (Exception e) {
            cond = true;
            System.out.println(e);
            logTextArea.append(e.toString() + "\n");
            System.out.print("Invalid Output");
        }
        String nom = nomTextField.getText();
        int sz = cir.getNoeudCircuit().size();

        if (naId > sz || ndId > sz || cond || naId == ndId) {
            //noeud existe pas ou noeudDepart==noeudArrivee ou invalid output
            errorLabel.setText("Invalid Output");
        } else {
            errorLabel.setText("");
            Noeud na = cir.getNoeudCircuit().get(naId - 1);
            Noeud nd = cir.getNoeudCircuit().get(ndId - 1);
            int x=0,y=0;
            
            //calculer le positionnement du composant :
            if (na.getPx()==nd.getPx()) x=nd.getPx();
            else x=(na.getPx()+nd.getPx())/2;
            if (na.getPy()==nd.getPy()) y=nd.getPy();
            else y=(na.getPy()+nd.getPy())/2;
            
            //Calculer angle du rotation
            int rot=0;
            int px=na.getPx(),py=na.getPy();
            int px2=nd.getPx(),py2=nd.getPy();
            if (px==px2)
                rot=90;
            else if (py!=py2){
                if (px>px2) rot=45;
                else rot=-45;
                
            }
                   
            
            switch (caractéristiqueLabel.getText().charAt(0)) {
                case 'F':
                    dessinerComposant("generateur", x, y,rot);
                    cir.ajouterCompCircuit(new GenerateurTension(id, nom, nd, na, val));
                    logTextArea.append("Creation Generateur :" + nom + " ( " + naId + " , " + ndId + " )\n");
                    System.out.println("Creation Generateur :" + id + " ( " + naId + " , " + ndId + " )");
                    break;
                case 'R':
                    dessinerComposant("resistance", x, y,rot);
                    cir.ajouterCompCircuit(new Resistance(id, nom, nd, na, val));
                    logTextArea.append("Creation Resistance :" + nom + " ( " + naId + " , " + ndId + " )\n");
                    System.out.println("Creation Resistance :" + id + " ( " + naId + " , " + ndId + " )");
                    break;
                case 'I':
                    dessinerComposant("bobine", x, y,rot);
                    cir.ajouterCompCircuit(new Inductance(id, nom, nd, na, val));
                    logTextArea.append("Creation Inductance :" + nom + " ( " + naId + " , " + ndId + " )\n");
                    System.out.println("Creation Inductance :" + id + " ( " + naId + " , " + ndId + " )");
                    break;
                case 'C':
                    dessinerComposant("condensateur", x, y,rot);
                    cir.ajouterCompCircuit(new Condensateur(id, nom, nd, na, val));
                    logTextArea.append("Creation Condensateur :" + nom + " ( " + naId + " , " + ndId + " )\n");
                    System.out.println("Creation Condensateur :" + id + " ( " + naId + " , " + ndId + " )");
                    break;
            }
        }

    }//GEN-LAST:event_creeButtonActionPerformed

    void dessinerComposant(String imgPath, int x, int y,int rotation) {
        if (g == null) {
            g = (Graphics2D) mainPanel.getGraphics();
        }
        try {
            System.out.println("Adding image");
            image = ImageIO.read(new File("src/images/" + imgPath + ".PNG"));
            mainPanel.update(g);
            // pour bien placer l'image dans le milieu 
            int width = image.getWidth();
            int height = image.getHeight();
           //+10 rayon du cercle
            x-=width/2-10;
            y-=height/2-10;
            imgContainer.add(new MyImage(image,x,y,rotation));
            DrawAll();
        } catch (IOException ex) {
            // handle exception...
            System.out.println("Image non trouvé");
        }
    }
   private void DrawAll() {
        for (int x = 0; x < lineContainer.size(); x++) {
            g.draw(lineContainer.get(x));
        }
        for (int x = 0; x < circContainer.size(); x++) {
            g.draw(circContainer.get(x));
        }
        for (int x = 0; x < imgContainer.size(); x++) {
            MyImage img =imgContainer.get(x);
            //Rotation 
            AffineTransform backup = g.getTransform();
            double rotX=img.getImg().getWidth()/2;
            double rotY=img.getImg().getHeight()/2;
            AffineTransform rot=AffineTransform.getRotateInstance(img.getRot(),rotX,rotY);
            AffineTransformOp op =new AffineTransformOp(rot,AffineTransformOp.TYPE_BILINEAR);
            g.drawImage(op.filter(img.getImg(), null), img.getX(),img.getY() ,null);
        }

    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ComposantInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ComposantInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ComposantInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ComposantInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ComposantInterface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel TitreLabel;
    private javax.swing.JLabel caractéristiqueLabel;
    private javax.swing.JTextField carctéristiqueTextField;
    private javax.swing.JButton creeButton;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JTextField noeudArriveeTextField;
    private javax.swing.JLabel noeudDepartLabel;
    private javax.swing.JTextField noeudDepartTextField;
    private javax.swing.JLabel nomLabel;
    private javax.swing.JTextField nomTextField;
    private javax.swing.JLabel noueudArriveLabel;
    private javax.swing.JLabel untieLabel;
    // End of variables declaration//GEN-END:variables
}
